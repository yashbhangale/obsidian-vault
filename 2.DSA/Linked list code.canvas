{
	"nodes":[
		{"id":"c03724b0264beb92","type":"text","text":"# Basic linked list code \n\n```java\nclass LinkedList {\n    // Node class to represent each element of the linked list\n    static class Node {\n        int data;\n        Node next;\n\n        // Constructor\n        Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n\n    private Node head; // Head of the linked list\n\n    // Method to add a new node at the end\n    public void add(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode; // If the list is empty, make the new node the head\n        } else {\n            Node temp = head;\n            while (temp.next != null) { // Traverse to the end of the list\n                temp = temp.next;\n            }\n            temp.next = newNode; // Link the last node to the new node\n        }\n    }\n\n    // Method to display the linked list\n    public void display() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    // Main method to test the LinkedList class\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n        list.add(10);\n        list.add(20);\n        list.add(30);\n        list.add(40);\n\n        System.out.println(\"Linked List:\");\n        list.display(); // Output: 10 -> 20 -> 30 -> 40 -> null\n    }\n}\n\n\n```","x":-700,"y":-880,"width":840,"height":1220,"color":"3"},
		{"id":"66fcac7630da1b7a","type":"text","text":"# Add element at beginning\n```java\n\n    // Head of the linked list\n    // Node head;\n\n    // Method to add an element at the beginning\n    public void addAtBeginning(int data) {\n        Node newNode = new Node(data); // Create a new node\n        newNode.next = head;          // Point the new node to the current head\n        head = newNode;               // Update head to the new node\n    }\n\n    // Method to display the linked list\n    public void display() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n\n        list.addAtBeginning(30);\n        list.addAtBeginning(20);\n        list.addAtBeginning(10);\n\n        System.out.println(\"Linked List after adding elements at the beginning:\");\n        list.display(); // Output: 10 -> 20 -> 30 -> null\n    }\n}\n\n```","x":320,"y":-1160,"width":760,"height":840},
		{"id":"e6264132f24aaff7","type":"text","text":"# Add element at ending\n```java\n    // Head of the linked list\n    Node head;\n\n    // Method to add an element at the end\n    public void addAtEnd(int data) {\n        Node newNode = new Node(data); // Create a new node\n        if (head == null) {           // If the list is empty\n            head = newNode;           // Make the new node the head\n        } else {\n            Node temp = head;         // Traverse to the end of the list\n            while (temp.next != null) {\n                temp = temp.next;\n            }\n            temp.next = newNode;      // Link the last node to the new node\n        }\n    }\n\n    // Method to display the linked list\n    public void display() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n\n        list.addAtEnd(10);\n        list.addAtEnd(20);\n        list.addAtEnd(30);\n\n        System.out.println(\"Linked List after adding elements at the end:\");\n        list.display(); // Output: 10 -> 20 -> 30 -> null\n    }\n}\n\n```","x":311,"y":-240,"width":769,"height":910},
		{"id":"9b2dea28936e022c","type":"text","text":"# Add element at a perticular index \n```java\n\n    // Head of the linked list\n    // Node head;\n\n    // Method to add an element at a specific index\n    public void addAtIndex(int data, int index) {\n        Node newNode = new Node(data);\n\n        if (index == 0) { // Insert at the beginning\n            newNode.next = head;\n            head = newNode;\n            return;\n        }\n\n        Node temp = head;\n        int currentIndex = 0;\n\n        // Traverse to the node before the target index\n        while (temp != null && currentIndex < index - 1) {\n            temp = temp.next;\n            currentIndex++;\n        }\n\n        if (temp == null) {\n            System.out.println(\"Index out of bounds!\");\n            return;\n        }\n\n        // Insert the new node\n        newNode.next = temp.next;\n        temp.next = newNode;\n    }\n\n    // Method to display the linked list\n    public void display() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n\n        // Add elements at specific positions\n        list.addAtIndex(10, 0); // Add 10 at index 0\n        list.addAtIndex(20, 1); // Add 20 at index 1\n        list.addAtIndex(15, 1); // Add 15 at index 1\n        list.addAtIndex(25, 5); // Attempt to add at out-of-bounds index\n\n        System.out.println(\"Linked List after adding elements at specific indices:\");\n        list.display(); // Output: 10 -> 15 -> 20 -> null\n    }\n}\n\n```","x":1200,"y":-924,"width":788,"height":1308},
		{"id":"3d60289efbe829f8","type":"text","text":"# Delete first element\n\n```java\n\n    // Head of the linked list\n    // Node head;\n\n    // Method to delete the node at the beginning\n    public void deleteAtBeginning() {\n        if (head == null) { // Check if the list is empty\n            System.out.println(\"The list is empty. Nothing to delete.\");\n            return;\n        }\n\n        head = head.next; // Move the head to the next node\n    }\n\n    // Method to display the linked list\n    public void display() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n\n        // Adding elements\n        list.head = new Node(10);\n        list.head.next = new Node(20);\n        list.head.next.next = new Node(30);\n\n        System.out.println(\"Original Linked List:\");\n        list.display(); // Output: 10 -> 20 -> 30 -> null\n\n        // Deleting the first element\n        list.deleteAtBeginning();\n\n        System.out.println(\"Linked List after deleting the first element:\");\n        list.display(); // Output: 20 -> 30 -> null\n    }\n}\n\n```","x":-1880,"y":-1740,"width":800,"height":1000},
		{"id":"6beb6460d5367573","type":"text","text":"# Delete A element of perticular Index\n\n```java\n\n    // Head of the linked list\n\t// Node head;\n\n    // Method to delete an element at a specific index\n    public void deleteAtIndex(int index) {\n        if (head == null) { // If the list is empty\n            System.out.println(\"The list is empty. Nothing to delete.\");\n            return;\n        }\n\n        if (index == 0) { // If deleting the head (index 0)\n            head = head.next;\n            return;\n        }\n\n        Node temp = head;\n        int currentIndex = 0;\n\n        // Traverse to the node just before the target index\n        while (temp != null && currentIndex < index - 1) {\n            temp = temp.next;\n            currentIndex++;\n        }\n\n        if (temp == null || temp.next == null) { // If index is out of bounds\n            System.out.println(\"Index out of bounds!\");\n            return;\n        }\n\n        // Remove the node at the index by skipping it\n        temp.next = temp.next.next;\n    }\n\n    // Method to display the linked list\n    public void display() {\n        Node temp = head;\n        while (temp != null) {\n            System.out.print(temp.data + \" -> \");\n            temp = temp.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n\n        // Adding elements\n        list.head = new Node(10);\n        list.head.next = new Node(20);\n        list.head.next.next = new Node(30);\n        list.head.next.next.next = new Node(40);\n\n        System.out.println(\"Original Linked List:\");\n        list.display(); // Output: 10 -> 20 -> 30 -> 40 -> null\n\n        // Deleting elements\n        list.deleteAtIndex(2); // Delete element at index 2 (30)\n        System.out.println(\"After deleting element at index 2:\");\n        list.display(); // Output: 10 -> 20 -> 40 -> null\n\n        list.deleteAtIndex(0); // Delete element at index 0 (10)\n        System.out.println(\"After deleting element at index 0:\");\n        list.display(); // Output: 20 -> 40 -> null\n\n        list.deleteAtIndex(5); // Attempt to delete out-of-bounds index\n    }\n}\n\n```","x":-1880,"y":-600,"width":800,"height":1561},
		{"id":"61897c3dc92381fc","type":"file","file":"2.DSA/1. Linked List.md","x":-880,"y":-2060,"width":1120,"height":1035,"color":"1"}
	],
	"edges":[
		{"id":"602c74bfc8f99cd1","fromNode":"c03724b0264beb92","fromSide":"right","toNode":"66fcac7630da1b7a","toSide":"left"},
		{"id":"295dafc549c71c07","fromNode":"c03724b0264beb92","fromSide":"right","toNode":"e6264132f24aaff7","toSide":"left"},
		{"id":"44a4ddbd463efd63","fromNode":"c03724b0264beb92","fromSide":"right","toNode":"9b2dea28936e022c","toSide":"left"},
		{"id":"dcd7d3468dead975","fromNode":"c03724b0264beb92","fromSide":"left","toNode":"3d60289efbe829f8","toSide":"right"},
		{"id":"3d9a4b0baad1fe57","fromNode":"c03724b0264beb92","fromSide":"left","toNode":"6beb6460d5367573","toSide":"right"}
	]
}